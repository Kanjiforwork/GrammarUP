import { NextRequest, NextResponse } from 'next/server'
import { getCurrentUser } from '@/lib/auth/get-user'
import { prisma } from '@/lib/prisma'
import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

// ‚úÖ Add cache configuration
export const revalidate = 60 // Revalidate every 60 seconds
export const dynamic = 'force-dynamic' // Always get fresh data for user-specific content

// GET /api/lessons - Fetch all lessons
export async function GET() {
  try {
    const user = await getCurrentUser()
    
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get user from database
    const dbUser = await prisma.user.findUnique({
      where: { email: user.email }
    })

    if (!dbUser) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 })
    }

    const userId = dbUser.id

    // ‚úÖ OPTIMIZED: Only select necessary fields, avoid loading heavy blocks data
    const lessons = await prisma.lesson.findMany({
      where: {
        OR: [
          { createdById: userId },
          { source: 'OFFICIAL' }
        ]
      },
      select: {
        id: true,
        title: true,
        description: true,
        source: true,
        createdAt: true,
        unit: {
          select: {
            title: true
          }
        },
        _count: {
          select: {
            blocks: true,
            questions: true
          }
        }
      },
      orderBy: [
        { unit: { sortOrder: 'asc' } },
        { sortOrder: 'asc' }
      ]
    })

    // ‚úÖ Add cache headers for better performance
    return NextResponse.json(lessons, {
      headers: {
        'Cache-Control': 'public, s-maxage=60, stale-while-revalidate=120',
      }
    })
  } catch (error) {
    console.error('Error fetching lessons:', error)
    return NextResponse.json(
      { error: 'Failed to fetch lessons' },
      { status: 500 }
    )
  }
}

// POST /api/lessons - Create new lesson
export async function POST(request: NextRequest) {
  try {
    const user = await getCurrentUser()
    
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { lessonName, lessonDescription, additionalRequirements, difficulty, blockCount } = body

    // Validation
    if (!lessonName?.trim()) {
      return NextResponse.json({ error: 'Lesson name is required' }, { status: 400 })
    }

    if (!lessonDescription?.trim()) {
      return NextResponse.json({ error: 'Lesson description is required' }, { status: 400 })
    }

    console.log('üìù Creating lesson with AI:', { lessonName, blockCount, difficulty })

    // ‚úÖ REMOVED strict validation - let AI generate and let user judge quality

    // Step 1: Generate lesson content using AI
    const prompt = `B·∫°n l√† chuy√™n gia t·∫°o b√†i h·ªçc ti·∫øng Anh. H√£y t·∫°o m·ªôt b√†i h·ªçc v·ªÅ:

üìå CH·ª¶ ƒê·ªÄ: "${lessonName}"
üìù M√î T·∫¢: "${lessonDescription}"
üìã Y√äU C·∫¶U TH√äM: ${additionalRequirements || 'Kh√¥ng c√≥ - b·∫°n t·ª± do s√°ng t·∫°o!'}

üí° H∆Ø·ªöNG D·∫™N:
- User mu·ªën h·ªçc v·ªÅ "${lessonName}"
- N·∫øu user cho chi ti·∫øt ‚Üí l√†m theo y√™u c·∫ßu ƒë√≥
- N·∫øu user ch·ªâ cho ti√™u ƒë·ªÅ ng·∫Øn ‚Üí b·∫°n t·ª± ph√°t tri·ªÉn n·ªôi dung h·ªØu √≠ch
- T·∫°o b√†i h·ªçc th·ª±c t·∫ø, d·ªÖ hi·ªÉu, sinh ƒë·ªông

üìä C·∫§U TR√öC B√ÄI H·ªåC:
B√†i h·ªçc c√≥ ${blockCount || 4} blocks theo th·ª© t·ª±:

1. **INTRO** (Gi·ªõi thi·ªáu):
   - Ch√†o m·ª´ng h·ªçc vi√™n
   - Gi·∫£i th√≠ch h·ªçc vi√™n s·∫Ω h·ªçc ƒë∆∞·ª£c g√¨
   - T·∫°o ƒë·ªông l·ª±c

2. **WHAT** (L√Ω thuy·∫øt):
   - Gi·∫£i th√≠ch ki·∫øn th·ª©c c·ªët l√µi
   - V√≠ d·ª• minh h·ªça
   - C·∫•u tr√∫c/c√¥ng th·ª©c (n·∫øu c√≥)

3. **HOW** (Th·ª±c h√†nh):
   - H∆∞·ªõng d·∫´n v·∫≠n d·ª•ng
   - C√°c b∆∞·ªõc th·ª±c hi·ªán
   - Tips & tricks

4. **REMIND** (Nh·∫Øc nh·ªü):
   - T·ªïng k·∫øt ƒëi·ªÉm quan tr·ªçng
   - L·ªùi khuy√™n cu·ªëi c√πng
   - ƒê·ªông vi√™n

üìÑ ƒê·ªäNH D·∫†NG JSON TR·∫¢ V·ªÄ:
{
  "blocks": [
    {
      "type": "INTRO",
      "order": 1,
      "data": {
        "title": "Welcome to...",
        "content": "Detailed introduction text...",
        "examples": []
      }
    },
    {
      "type": "WHAT",
      "order": 2,
      "data": {
        "title": "What is...",
        "content": "Theory explanation...",
        "examples": ["Example 1", "Example 2"]
      }
    },
    {
      "type": "HOW",
      "order": 3,
      "data": {
        "title": "How to use...",
        "content": "Step by step guide...",
        "examples": ["Usage example 1"]
      }
    },
    {
      "type": "REMIND",
      "order": 4,
      "data": {
        "title": "Remember",
        "content": "Key takeaways...",
        "examples": []
      }
    }
  ]
}

‚ú® L∆ØU √ù:
- N·ªôi dung b·∫±ng Ti·∫øng Anh (ho·∫∑c theo ng√¥n ng·ªØ user y√™u c·∫ßu)
- D·ªÖ hi·ªÉu, th·ª±c t·∫ø, c√≥ gi√° tr·ªã h·ªçc t·∫≠p
- V√≠ d·ª• c·ª• th·ªÉ, kh√¥ng d√πng placeholder
- Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng gi·∫£i th√≠ch th√™m`

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: 'B·∫°n l√† gi√°o vi√™n ti·∫øng Anh chuy√™n nghi·ªáp. T·∫°o n·ªôi dung b√†i h·ªçc sinh ƒë·ªông, d·ªÖ hi·ªÉu, c√≥ gi√° tr·ªã th·ª±c t·∫ø. Lu√¥n t·∫°o n·ªôi dung ngay c·∫£ khi y√™u c·∫ßu ƒë∆°n gi·∫£n - h√£y s√°ng t·∫°o v√† ph√°t tri·ªÉn th√†nh b√†i h·ªçc ch·∫•t l∆∞·ª£ng. Ch·ªâ tr·∫£ v·ªÅ JSON.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.7,
      response_format: { type: 'json_object' }
    })

    const result = JSON.parse(completion.choices[0].message.content || '{}')
    const blocks = result.blocks || []

    if (blocks.length === 0) {
      throw new Error('AI kh√¥ng t·∫°o ƒë∆∞·ª£c n·ªôi dung b√†i h·ªçc')
    }

    console.log(`‚úÖ AI generated ${blocks.length} blocks`)

    // Step 2: Validate block structure
    const requiredBlocks = ['INTRO', 'WHAT', 'HOW', 'REMIND']
    const blockTypes = blocks.map((b: any) => b.type)
    
    for (const requiredType of requiredBlocks) {
      if (!blockTypes.includes(requiredType)) {
        throw new Error(`Thi·∫øu block b·∫Øt bu·ªôc: ${requiredType}`)
      }
    }

    // Step 3: Create lesson and blocks in database
    // ‚úÖ OPTIMIZED: Use shorter transaction with createMany
    const lesson = await prisma.$transaction(async (tx) => {
      // Get user from database
      const dbUser = await tx.user.findUnique({
        where: { email: user.email }
      })

      if (!dbUser) {
        throw new Error('User not found')
      }

      // Get or create unit for user-generated lessons
      let unit = await tx.unit.findFirst({
        where: { title: 'Generated Lessons' }
      })
      
      if (!unit) {
        unit = await tx.unit.create({
          data: {
            title: 'Generated Lessons',
            description: 'AI-generated lesson content',
            sortOrder: 999
          }
        })
      }

      // ‚úÖ Create lesson WITH createdById and source
      const newLesson = await tx.lesson.create({
        data: {
          title: lessonName.trim(),
          description: lessonDescription.trim(),
          unitId: unit.id,
          sortOrder: 0,
          createdById: dbUser.id,
          source: 'USER_CREATED',
          isPublic: false
        }
      })

      // ‚úÖ OPTIMIZED: Use createMany instead of loop
      const blockData = blocks.map((block: any) => ({
        lessonId: newLesson.id,
        type: block.type,
        order: block.order,
        data: block.data
      }))

      await tx.lessonBlock.createMany({
        data: blockData
      })

      return newLesson
    }, {
      timeout: 15000, // ‚úÖ Increase timeout to 15s for Vercel
      maxWait: 5000,  // ‚úÖ Max wait for connection
    })

    // Step 4: Return created lesson with blocks
    const createdLesson = await prisma.lesson.findUnique({
      where: { id: lesson.id },
      include: {
        unit: true,
        blocks: {
          orderBy: { order: 'asc' }
        },
        _count: {
          select: {
            blocks: true,
            questions: true
          }
        }
      }
    })

    console.log('üéâ Lesson created successfully:', createdLesson?.id)

    return NextResponse.json({ 
      lesson: createdLesson,
      message: 'Lesson created successfully',
      blocksCreated: blocks.length
    })

  } catch (error) {
    console.error('‚ùå Error creating lesson:', error)
    
    if (error instanceof Error) {
      return NextResponse.json(
        { error: error.message || 'Kh√¥ng th·ªÉ t·∫°o b√†i h·ªçc' },
        { status: 500 }
      )
    }

    return NextResponse.json(
      { error: 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh' },
      { status: 500 }
    )
  }
}