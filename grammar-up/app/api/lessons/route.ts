import { NextRequest, NextResponse } from 'next/server'
import { getCurrentUser } from '@/lib/auth/get-user'
import { prisma } from '@/lib/prisma'
import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

// GET /api/lessons - Fetch all lessons
export async function GET() {
  try {
    const user = await getCurrentUser()
    
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const lessons = await prisma.lesson.findMany({
      include: {
        unit: {
          select: {
            title: true
          }
        },
        blocks: true,
        _count: {
          select: {
            blocks: true,
            questions: true
          }
        }
      },
      orderBy: [
        { unit: { sortOrder: 'asc' } },
        { sortOrder: 'asc' }
      ]
    })

    return NextResponse.json(lessons)
  } catch (error) {
    console.error('Error fetching lessons:', error)
    return NextResponse.json(
      { error: 'Failed to fetch lessons' },
      { status: 500 }
    )
  }
}

// POST /api/lessons - Create new lesson
export async function POST(request: NextRequest) {
  try {
    const user = await getCurrentUser()
    
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { lessonName, lessonDescription, additionalRequirements, difficulty, blockCount } = body

    // Validation
    if (!lessonName?.trim()) {
      return NextResponse.json({ error: 'Lesson name is required' }, { status: 400 })
    }

    if (!lessonDescription?.trim()) {
      return NextResponse.json({ error: 'Lesson description is required' }, { status: 400 })
    }

    console.log('üìù Creating lesson with AI:', { lessonName, blockCount, difficulty })

    // Step 1: Generate lesson content using AI
    const prompt = `B·∫°n l√† m·ªôt gi√°o vi√™n ti·∫øng Anh chuy√™n nghi·ªáp. T·∫°o n·ªôi dung b√†i h·ªçc "${lessonName}" v·ªõi ${blockCount} blocks.

Th√¥ng tin:
- T√™n b√†i h·ªçc: ${lessonName}
- M√¥ t·∫£: ${lessonDescription}
- ƒê·ªô kh√≥: ${difficulty}
- Y√™u c·∫ßu th√™m: ${additionalRequirements || 'Kh√¥ng c√≥'}

C·∫§U TR√öC B√ÄI H·ªåC (${blockCount} blocks):

1. Block INTRO (order: 1):
- title: Ti√™u ƒë·ªÅ b√†i h·ªçc (gi·ªØ nguy√™n "${lessonName}")
- subtitle: M√¥ t·∫£ ng·∫Øn g·ªçn (1 c√¢u)
- kahootHint: G·ª£i √Ω warm-up (v√≠ d·ª•: "3 c√¢u ƒë√∫ng/sai v·ªÅ...")
- cta: "B·∫Øt ƒë·∫ßu h·ªçc"

2. Block WHAT (order: 2):
- heading: "D√πng ƒë·ªÉ l√†m g√¨?"
- content: Gi·∫£i th√≠ch chi ti·∫øt c√¥ng d·ª•ng/m·ª•c ƒë√≠ch s·ª≠ d·ª•ng (2-3 c√¢u)
- examples: Array g·ªìm 2-3 v√≠ d·ª•, m·ªói example c√≥ format:
  { en: "c√¢u ti·∫øng Anh", vi: "c√¢u ti·∫øng Vi·ªát" }
- notes: Array g·ªìm 1-2 l∆∞u √Ω quan tr·ªçng

3. Block HOW (order: 3):
- heading: "C·∫•u tr√∫c v√† c√°ch s·ª≠ d·ª•ng"
- content: Gi·∫£i th√≠ch c·∫•u tr√∫c ng·ªØ ph√°p v·ªõi format r√µ r√†ng (s·ª≠ d·ª•ng \\n cho xu·ªëng d√≤ng)
  V√≠ d·ª•: "Kh·∫≥ng ƒë·ªãnh: S + V(s/es)\\nPh·ªß ƒë·ªãnh: S + do/does + not + V\\nNghi v·∫•n: Do/Does + S + V?"
- notes: Array g·ªìm 2-4 quy t·∫Øc/l∆∞u √Ω ng·ªØ ph√°p quan tr·ªçng
- examples: Array g·ªìm 2-3 v√≠ d·ª• minh h·ªça c·∫•u tr√∫c:
  { en: "c√¢u ti·∫øng Anh", vi: "c√¢u ti·∫øng Vi·ªát" }

4. Block REMIND (order: 4):
- question: C√¢u h·ªèi √¥n t·∫≠p ki·∫øn th·ª©c v·ª´a h·ªçc (v·ªÅ c·∫•u tr√∫c ho·∫∑c c√°ch d√πng)
- options: Array g·ªìm 4 ƒë√°p √°n
- answerIndex: Index c·ªßa ƒë√°p √°n ƒë√∫ng (0-3)
- explain: Gi·∫£i th√≠ch t·∫°i sao ƒë√°p √°n ƒë√≥ ƒë√∫ng (2-3 c√¢u)

5-${blockCount}. C√°c block MINIQUIZ (order: 5 ƒë·∫øn ${blockCount}):
T·∫°o ${blockCount - 4} c√¢u h·ªèi tr·∫Øc nghi·ªám ƒë·ªÉ luy·ªán t·∫≠p, m·ªói block c√≥:
- question: C√¢u h·ªèi c·ª• th·ªÉ (ƒëi·ªÅn t·ª´, ch·ªçn ƒë√°p √°n ƒë√∫ng, t√¨m l·ªói sai...)
- options: Array g·ªìm 4 ƒë√°p √°n
- answerIndex: Index c·ªßa ƒë√°p √°n ƒë√∫ng (0-3)
- explain: Gi·∫£i th√≠ch ƒë√°p √°n (1-2 c√¢u)

C√°c c√¢u h·ªèi MINIQUIZ ph·∫£i:
- TƒÉng d·∫ßn ƒë·ªô kh√≥
- ƒêa d·∫°ng (c√¢u kh·∫≥ng ƒë·ªãnh, ph·ªß ƒë·ªãnh, nghi v·∫•n, l·ª±a ch·ªçn t·ª´ ƒë√∫ng...)
- Ph√π h·ª£p ƒë·ªô kh√≥ ${difficulty}
- S√°t v·ªõi n·ªôi dung ƒë√£ d·∫°y

QUAN TR·ªåNG:
- N·ªôi dung ph·∫£i c·ª• th·ªÉ, chi ti·∫øt, kh√¥ng d√πng placeholder
- V√≠ d·ª• ph·∫£i th·ª±c t·∫ø, d·ªÖ hi·ªÉu
- C√¢u h·ªèi ph·∫£i c√≥ gi√° tr·ªã luy·ªán t·∫≠p th·ª±c s·ª±
- ƒê√°p √°n ph·∫£i ch√≠nh x√°c 100%

Tr·∫£ v·ªÅ CH√çNH X√ÅC JSON v·ªõi c·∫•u tr√∫c:
{
  "blocks": [
    {
      "type": "INTRO",
      "order": 1,
      "data": { "title": "...", "subtitle": "...", "kahootHint": "...", "cta": "B·∫Øt ƒë·∫ßu h·ªçc" }
    },
    {
      "type": "WHAT",
      "order": 2,
      "data": {
        "heading": "D√πng ƒë·ªÉ l√†m g√¨?",
        "content": "...",
        "examples": [{"en": "...", "vi": "..."}, ...],
        "notes": ["...", "..."]
      }
    },
    {
      "type": "HOW",
      "order": 3,
      "data": {
        "heading": "C·∫•u tr√∫c v√† c√°ch s·ª≠ d·ª•ng",
        "content": "...",
        "notes": ["...", "...", "..."],
        "examples": [{"en": "...", "vi": "..."}, ...]
      }
    },
    {
      "type": "REMIND",
      "order": 4,
      "data": {
        "question": "...",
        "options": ["...", "...", "...", "..."],
        "answerIndex": 0,
        "explain": "..."
      }
    },
    {
      "type": "MINIQUIZ",
      "order": 5,
      "data": {
        "question": "...",
        "options": ["...", "...", "...", "..."],
        "answerIndex": 0,
        "explain": "..."
      }
    }
    // ... more MINIQUIZ blocks
  ]
}`

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: 'B·∫°n l√† gi√°o vi√™n ti·∫øng Anh chuy√™n nghi·ªáp v·ªõi kinh nghi·ªám so·∫°n gi√°o √°n. T·∫°o n·ªôi dung b√†i h·ªçc chi ti·∫øt, c·ª• th·ªÉ, c√≥ gi√° tr·ªã gi√°o d·ª•c cao. Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng gi·∫£i th√≠ch th√™m.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.7,
      response_format: { type: 'json_object' }
    })

    const result = JSON.parse(completion.choices[0].message.content || '{}')
    const blocks = result.blocks || []

    if (blocks.length === 0) {
      throw new Error('AI kh√¥ng t·∫°o ƒë∆∞·ª£c n·ªôi dung b√†i h·ªçc')
    }

    console.log(`‚úÖ AI generated ${blocks.length} blocks`)

    // Step 2: Validate block structure
    const requiredBlocks = ['INTRO', 'WHAT', 'HOW', 'REMIND']
    const blockTypes = blocks.map((b: any) => b.type)
    
    for (const requiredType of requiredBlocks) {
      if (!blockTypes.includes(requiredType)) {
        throw new Error(`Thi·∫øu block b·∫Øt bu·ªôc: ${requiredType}`)
      }
    }

    // Step 3: Create lesson and blocks in database
    const lesson = await prisma.$transaction(async (tx) => {
      // Get or create unit
      let unit = await tx.unit.findFirst({
        where: { title: 'Generated Lessons' }
      })
      
      if (!unit) {
        unit = await tx.unit.create({
          data: {
            title: 'Generated Lessons',
            description: 'AI-generated lesson content',
            sortOrder: 999
          }
        })
      }

      // Create lesson
      const newLesson = await tx.lesson.create({
        data: {
          title: lessonName.trim(),
          description: lessonDescription.trim(),
          unitId: unit.id,
          sortOrder: 0
        }
      })

      // Create all blocks
      const blockData = blocks.map((block: any) => ({
        lessonId: newLesson.id,
        type: block.type,
        order: block.order,
        data: block.data
      }))

      await tx.lessonBlock.createMany({
        data: blockData
      })

      return newLesson
    })

    // Step 4: Return created lesson with blocks
    const createdLesson = await prisma.lesson.findUnique({
      where: { id: lesson.id },
      include: {
        unit: true,
        blocks: {
          orderBy: { order: 'asc' }
        },
        _count: {
          select: {
            blocks: true,
            questions: true
          }
        }
      }
    })

    console.log('üéâ Lesson created successfully:', createdLesson?.id)

    return NextResponse.json({ 
      lesson: createdLesson,
      message: 'Lesson created successfully',
      blocksCreated: blocks.length
    })

  } catch (error) {
    console.error('‚ùå Error creating lesson:', error)
    
    if (error instanceof Error) {
      return NextResponse.json(
        { error: error.message || 'Kh√¥ng th·ªÉ t·∫°o b√†i h·ªçc' },
        { status: 500 }
      )
    }

    return NextResponse.json(
      { error: 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh' },
      { status: 500 }
    )
  }
}