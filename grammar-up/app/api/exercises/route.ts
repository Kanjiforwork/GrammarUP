import { NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import OpenAI from 'openai'
import { getCurrentUser } from '@/lib/auth/get-user'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export async function GET() {
  try {
    console.log('üîç Fetching exercises...')
    
    // Get current user
    const user = await getCurrentUser()
    let userId: string | null = null
    
    if (user) {
      const dbUser = await prisma.user.findUnique({
        where: { email: user.email }
      })
      userId = dbUser?.id || null
    }

    const exercises = await prisma.exercise.findMany({
      orderBy: {
        sortOrder: 'asc',
      },
      include: {
        lesson: true,
        _count: {
          select: {
            exerciseQuestions: true,
          },
        },
        exerciseQuestions: {
          include: {
            question: true
          }
        }
      },
    })

    // For each exercise, calculate latest score if user is logged in
    const exercisesWithScores = await Promise.all(exercises.map(async (exercise) => {
      let latestScore = null
      
      if (userId) {
        // Get all question IDs in this exercise
        const questionIds = exercise.exerciseQuestions.map(eq => eq.question.id)
        
        if (questionIds.length > 0) {
          // Get the latest attempt timestamp for this exercise
          const latestAttempt = await prisma.attempt.findFirst({
            where: {
              userId,
              questionId: { in: questionIds }
            },
            orderBy: {
              createdAt: 'desc'
            },
            select: {
              createdAt: true
            }
          })

          if (latestAttempt) {
            // Get all attempts from that session (within 1 hour window)
            const sessionStart = new Date(latestAttempt.createdAt.getTime() - 60 * 60 * 1000)
            const sessionEnd = new Date(latestAttempt.createdAt.getTime() + 60 * 60 * 1000)
            
            const sessionAttempts = await prisma.attempt.findMany({
              where: {
                userId,
                questionId: { in: questionIds },
                createdAt: {
                  gte: sessionStart,
                  lte: sessionEnd
                }
              },
              select: {
                isCorrect: true,
                questionId: true
              }
            })

            // Calculate score (count unique correct questions)
            const correctQuestions = new Set(
              sessionAttempts.filter(a => a.isCorrect).map(a => a.questionId)
            )
            const totalQuestions = questionIds.length
            const score = correctQuestions.size
            const percentage = Math.round((score / totalQuestions) * 100)

            latestScore = {
              score,
              totalQuestions,
              percentage,
              completedAt: latestAttempt.createdAt
            }
          }
        }
      }

      return {
        ...exercise,
        latestScore
      }
    }))

    console.log('‚úÖ Found exercises:', exercisesWithScores.length)
    return NextResponse.json(exercisesWithScores)
  } catch (error) {
    console.error('‚ùå Error fetching exercises:', error)
    if (error instanceof Error) {
      console.error('Error message:', error.message)
      console.error('Error stack:', error.stack)
    }
    return NextResponse.json({ error: 'Failed to fetch exercises' }, { status: 500 })
  }
}

export async function POST(request: Request) {
  try {
    const body = await request.json()
    const { mode, exerciseName, additionalRequirements, difficulty, questionTypes, questionCount, manualContent, lessonId } = body

    console.log('üìù Creating exercise:', { mode, exerciseName })

    // Step 1: Generate questions using GPT-4o-mini
    let questionsData: any[] = []

    if (mode === 'ai') {
      // Validate AI mode inputs
      const selectedTypes = Object.entries(questionTypes)
        .filter(([_, selected]) => selected)
        .map(([type]) => type)

      if (selectedTypes.length === 0) {
        return NextResponse.json(
          { error: 'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt lo·∫°i c√¢u h·ªèi' },
          { status: 400 }
        )
      }

      // Build AI prompt
      const prompt = `B·∫°n l√† m·ªôt chuy√™n gia t·∫°o ƒë·ªÅ thi ti·∫øng Anh. H√£y t·∫°o ${questionCount} c√¢u h·ªèi cho b√†i t·∫≠p "${exerciseName}".

Th√¥ng tin:
- ƒê·ªô kh√≥: ${difficulty}
- Lo·∫°i c√¢u h·ªèi: ${selectedTypes.join(', ')}
- Y√™u c·∫ßu th√™m: ${additionalRequirements || 'Kh√¥ng c√≥'}

Ph√¢n b·ªï c√¢u h·ªèi ƒë·ªÅu cho c√°c lo·∫°i ƒë√£ ch·ªçn.

ƒê·ªãnh d·∫°ng JSON cho t·ª´ng lo·∫°i:

MCQ (Multiple Choice):
{
  "type": "MCQ",
  "prompt": "C√¢u h·ªèi",
  "concept": "present_simple_verb",
  "level": "${difficulty}",
  "data": {
    "choices": ["l·ª±a ch·ªçn 1", "l·ª±a ch·ªçn 2", "l·ª±a ch·ªçn 3", "l·ª±a ch·ªçn 4"],
    "answerIndex": 0
  }
}

CLOZE (Fill in the blank):
{
  "type": "CLOZE",
  "prompt": "Ho√†n th√†nh c√¢u",
  "concept": "present_simple_verb",
  "level": "${difficulty}",
  "data": {
    "template": "I {{1}} to school every day.",
    "answers": ["go"]
  }
}

ORDER (Word ordering):
{
  "type": "ORDER",
  "prompt": "S·∫Øp x·∫øp c√°c t·ª´ theo ƒë√∫ng th·ª© t·ª±",
  "concept": "present_simple_word_order",
  "level": "${difficulty}",
  "data": {
    "tokens": ["I", "go", "to", "school"]
  }
}

TRANSLATE (Translation):
{
  "type": "TRANSLATE",
  "prompt": "D·ªãch c√¢u sau sang ti·∫øng Anh",
  "concept": "present_simple_translation",
  "level": "${difficulty}",
  "data": {
    "vietnameseText": "T√¥i ƒëi h·ªçc m·ªói ng√†y.",
    "correctAnswer": "I go to school every day."
  }
}

Tr·∫£ v·ªÅ CH√çNH X√ÅC JSON array v·ªõi ${questionCount} c√¢u h·ªèi, kh√¥ng th√™m text gi·∫£i th√≠ch:
{ "questions": [...] }`

      const completion = await openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'B·∫°n l√† m·ªôt chuy√™n gia t·∫°o ƒë·ªÅ thi ti·∫øng Anh. Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng gi·∫£i th√≠ch th√™m.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.8,
        response_format: { type: 'json_object' }
      })

      const result = JSON.parse(completion.choices[0].message.content || '{}')
      questionsData = result.questions || []

      if (questionsData.length === 0) {
        throw new Error('AI kh√¥ng t·∫°o ƒë∆∞·ª£c c√¢u h·ªèi')
      }

      console.log(`‚úÖ AI generated ${questionsData.length} questions`)
    } else {
      // Manual mode - support both plain text and JSON
      const content = manualContent.trim()
      
      // Try to detect if it's JSON
      const looksLikeJSON = content.startsWith('{') || content.startsWith('[')
      
      if (looksLikeJSON) {
        // JSON mode - validate directly
        try {
          const parsed = JSON.parse(content)
          questionsData = Array.isArray(parsed) ? parsed : parsed.questions || []
          
          if (questionsData.length === 0) {
            return NextResponse.json(
              { error: 'Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o trong JSON' },
              { status: 400 }
            )
          }
          
          console.log(`‚úÖ Parsed ${questionsData.length} questions from JSON`)
        } catch {
          return NextResponse.json(
            { error: 'JSON kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra c√∫ ph√°p.' },
            { status: 400 }
          )
        }
      } else {
        // Plain text mode - use AI to convert to structured format (2-step process)
        console.log('üìù Converting plain text to structured questions...')
        
        // STEP 1: Parse text into structured format (WITHOUT determining answers)
        const parsingPrompt = `B·∫°n l√† chuy√™n gia ph√¢n t√≠ch ƒë·ªÅ thi ti·∫øng Anh. Nhi·ªám v·ª•: Chuy·ªÉn text th√†nh c·∫•u tr√∫c JSON.

QUAN TR·ªåNG: Ch·ªâ ch·∫•p nh·∫≠n 4 lo·∫°i c√¢u h·ªèi:
- MCQ (Multiple Choice) - Tr·∫Øc nghi·ªám
- CLOZE (Fill in the blank) - ƒêi·ªÅn t·ª´  
- ORDER (Word ordering) - S·∫Øp x·∫øp t·ª´
- TRANSLATE (Translation) - D·ªãch c√¢u

N·ªôi dung t·ª´ ng∆∞·ªùi d√πng:
"""
${content}
"""

H√£y ph√¢n t√≠ch v√† chuy·ªÉn ƒë·ªïi th√†nh JSON:

{
  "questions": [
    {
      "type": "MCQ" | "CLOZE" | "ORDER" | "TRANSLATE",
      "prompt": "C√¢u h·ªèi ch√≠nh (kh√¥ng bao g·ªìm c√°c l·ª±a ch·ªçn)",
      "concept": "grammar_topic",
      "level": "A1" | "A2" | "B1" | "B2",
      "rawData": {
        // MCQ: danh s√°ch t·∫•t c·∫£ l·ª±a ch·ªçn theo th·ª© t·ª±
        "choices": ["the many", "the less", "the fewer", "the little"],
        
        // CLOZE: template v·ªõi {{1}} v√† danh s√°ch t·ª´ c√≥ th·ªÉ ƒëi·ªÅn
        "template": "He {{1}} to school",
        "possibleAnswers": ["goes", "go", "went"]
        
        // ORDER: danh s√°ch c√°c t·ª´ c·∫ßn s·∫Øp x·∫øp
        "tokens": ["I", "go", "to", "school"]
        
        // TRANSLATE: text ti·∫øng Vi·ªát c·∫ßn d·ªãch
        "vietnameseText": "T√¥i ƒëi h·ªçc m·ªói ng√†y"
      }
    }
  ],
  "rejected": [
    { "reason": "L√Ω do t·ª´ ch·ªëi n·∫øu kh√¥ng ph·∫£i 4 d·∫°ng cho ph√©p" }
  ]
}

L∆ØU √ù:
- V·ªõi MCQ: L·∫•y TO√ÄN B·ªò n·ªôi dung c·ªßa c√°c l·ª±a ch·ªçn (A. the many, B. the less...) ‚Üí b·ªè ch·ªØ c√°i A, B, C, D
- KH√îNG x√°c ƒë·ªãnh ƒë√°p √°n ƒë√∫ng ·ªü b∆∞·ªõc n√†y
- Ch·ªâ t·∫≠p trung parse v√† structure h√≥a data`

        const parsingCompletion = await openai.chat.completions.create({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: 'B·∫°n l√† chuy√™n gia parse d·ªØ li·ªáu. Ch·ªâ parse v√† structure, KH√îNG x√°c ƒë·ªãnh ƒë√°p √°n. Tr·∫£ v·ªÅ JSON.'
            },
            {
              role: 'user',
              content: parsingPrompt
            }
          ],
          temperature: 0.2,
          response_format: { type: 'json_object' }
        })

        const parseResult = JSON.parse(parsingCompletion.choices[0].message.content || '{}')
        const parsedQuestions = parseResult.questions || []
        const rejected = parseResult.rejected || []

        if (rejected.length > 0) {
          console.log('‚ö†Ô∏è Some questions were rejected:', rejected)
        }

        if (parsedQuestions.length === 0) {
          return NextResponse.json(
            { 
              error: 'Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi h·ª£p l·ªá. Ch·ªâ h·ªó tr·ª£ 4 d·∫°ng: Tr·∫Øc nghi·ªám, ƒêi·ªÅn t·ª´, S·∫Øp x·∫øp, D·ªãch c√¢u.',
              rejected: rejected
            },
            { status: 400 }
          )
        }

        console.log(`‚úÖ Parsed ${parsedQuestions.length} questions structure`)

        // STEP 2: Determine correct answers for each question
        console.log('üéØ Determining correct answers...')
        
        questionsData = []
        
        for (let i = 0; i < parsedQuestions.length; i++) {
          const q = parsedQuestions[i]
          
          let answerPrompt = ''
          
          if (q.type === 'MCQ') {
            answerPrompt = `You are an expert English grammar teacher. A student needs to know the CORRECT answer.

Question: ${q.prompt}
Choices:
${q.rawData.choices.map((c: string, idx: number) => `${idx}. ${c}`).join('\n')}

IMPORTANT:
- Apply ALL English grammar rules correctly (subject-verb agreement, tenses, conditionals, etc.)
- For "Neither...nor" / "Either...or": verb agrees with the CLOSEST subject
- For comparative structures: ensure correct form (fewer/less, many/much, etc.)
- Double-check your answer before responding

Return JSON:
{
  "answerIndex": 0,
  "explanation": "Brief explanation why this is correct (in Vietnamese)"
}

Think step by step and provide the grammatically correct answer.`
          } else if (q.type === 'CLOZE') {
            answerPrompt = `You are an expert English grammar teacher.

Template: ${q.rawData.template}
Possible words to fill: ${q.rawData.possibleAnswers.join(', ')}

Choose the grammatically CORRECT word/phrase.

Return JSON:
{
  "correctAnswer": "goes",
  "explanation": "Brief explanation (in Vietnamese)"
}`
          } else if (q.type === 'ORDER') {
            answerPrompt = `You are an expert English grammar teacher.

Words to arrange: ${q.rawData.tokens.join(', ')}

Arrange into a grammatically CORRECT English sentence.

Return JSON:
{
  "correctOrder": ["I", "go", "to", "school"],
  "explanation": "Brief explanation (in Vietnamese)"
}`
          } else if (q.type === 'TRANSLATE') {
            answerPrompt = `You are an expert English translator.

Vietnamese: ${q.rawData.vietnameseText}

Translate to natural, grammatically correct English.

Return JSON:
{
  "correctAnswer": "I go to school every day.",
  "explanation": "Brief explanation (in Vietnamese)"
}`
          }

          const answerCompletion = await openai.chat.completions.create({
            model: 'gpt-4o', // ‚Üê Upgraded to GPT-4o (not mini)
            messages: [
              {
                role: 'system',
                content: 'You are an expert English grammar teacher with 100% accuracy. Think carefully and apply all grammar rules correctly before answering.'
              },
              {
                role: 'user',
                content: answerPrompt
              }
            ],
            temperature: 0.1, // Very low for consistency
            response_format: { type: 'json_object' }
          })

          const answerResult = JSON.parse(answerCompletion.choices[0].message.content || '{}')
          
          // Build final question data
          let finalData: any = {}
          
          if (q.type === 'MCQ') {
            finalData = {
              choices: q.rawData.choices,
              answerIndex: answerResult.answerIndex
            }
          } else if (q.type === 'CLOZE') {
            finalData = {
              template: q.rawData.template,
              answers: [answerResult.correctAnswer]
            }
          } else if (q.type === 'ORDER') {
            finalData = {
              tokens: answerResult.correctOrder || q.rawData.tokens
            }
          } else if (q.type === 'TRANSLATE') {
            finalData = {
              vietnameseText: q.rawData.vietnameseText,
              correctAnswer: answerResult.correctAnswer
            }
          }
          
          questionsData.push({
            type: q.type,
            prompt: q.prompt,
            concept: q.concept,
            level: q.level,
            explain: answerResult.explanation,
            data: finalData
          })
          
          console.log(`  ‚úÖ Determined answer for question ${i + 1}/${parsedQuestions.length}`)
        }

        console.log(`‚úÖ Converted ${questionsData.length} questions with correct answers`)
        if (rejected.length > 0) {
          console.log(`‚ö†Ô∏è Rejected ${rejected.length} unsupported questions`)
        }
      }
    }

    // Step 2: Validate questions structure and types
    const validTypes = ['MCQ', 'CLOZE', 'ORDER', 'TRANSLATE']
    const invalidQuestions = []

    for (let i = 0; i < questionsData.length; i++) {
      const q = questionsData[i]
      
      if (!q.type || !q.prompt || !q.data) {
        invalidQuestions.push(`C√¢u ${i + 1}: Thi·∫øu type, prompt ho·∫∑c data`)
        continue
      }

      if (!validTypes.includes(q.type)) {
        invalidQuestions.push(`C√¢u ${i + 1}: Lo·∫°i "${q.type}" kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Ch·ªâ ch·∫•p nh·∫≠n: MCQ, CLOZE, ORDER, TRANSLATE`)
      }
    }

    if (invalidQuestions.length > 0) {
      return NextResponse.json(
        { 
          error: 'C√≥ c√¢u h·ªèi kh√¥ng h·ª£p l·ªá',
          details: invalidQuestions
        },
        { status: 400 }
      )
    }

    // Step 3: Create exercise with questions in a single transaction
    const exercise = await prisma.$transaction(async (tx) => {
      // Create exercise
      const newExercise = await tx.exercise.create({
        data: {
          title: exerciseName,
          description: additionalRequirements || `B√†i t·∫≠p ${mode === 'ai' ? 'AI t·∫°o' : 't·ª± nh·∫≠p'} - ${questionsData.length} c√¢u h·ªèi`,
          lessonId: lessonId || null,
          source: 'USER_CREATED',
          isPublic: false,
        }
      })

      // Create questions and link to exercise
      for (let i = 0; i < questionsData.length; i++) {
        const qData = questionsData[i]
        
        const question = await tx.question.create({
          data: {
            type: qData.type,
            prompt: qData.prompt,
            concept: qData.concept || 'general',
            level: qData.level || difficulty || 'A1',
            lessonId: lessonId || null,
            explain: qData.explain || null,
            data: qData.data,
            source: 'USER_CREATED',
            isPublic: false,
          }
        })

        await tx.exerciseQuestion.create({
          data: {
            exerciseId: newExercise.id,
            questionId: question.id,
            sortOrder: i + 1,
          }
        })
      }

      return newExercise
    })

    console.log('üéâ Exercise created successfully:', exercise.id)

    return NextResponse.json({
      success: true,
      exercise: {
        id: exercise.id,
        title: exercise.title,
        questionCount: questionsData.length
      }
    })

  } catch (error) {
    console.error('‚ùå Error creating exercise:', error)
    
    // Return specific error messages
    if (error instanceof Error) {
      return NextResponse.json(
        { error: error.message || 'Kh√¥ng th·ªÉ t·∫°o b√†i t·∫≠p. Vui l√≤ng th·ª≠ l·∫°i.' },
        { status: 500 }
      )
    }

    return NextResponse.json(
      { error: 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i.' },
      { status: 500 }
    )
  }
}
