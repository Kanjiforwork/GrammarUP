import { NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export async function GET() {
  try {
    console.log('üîç Fetching exercises...')
    const exercises = await prisma.exercise.findMany({
      orderBy: {
        sortOrder: 'asc',
      },
      include: {
        lesson: true,
        _count: {
          select: {
            exerciseQuestions: true,
          },
        },
      },
    })

    console.log('‚úÖ Found exercises:', exercises.length)
    return NextResponse.json(exercises)
  } catch (error) {
    console.error('‚ùå Error fetching exercises:', error)
    // Log the full error details
    if (error instanceof Error) {
      console.error('Error message:', error.message)
      console.error('Error stack:', error.stack)
    }
    return NextResponse.json({ error: 'Failed to fetch exercises' }, { status: 500 })
  }
}

export async function POST(request: Request) {
  try {
    const body = await request.json()
    const { mode, exerciseName, additionalRequirements, difficulty, questionTypes, questionCount, manualContent, lessonId } = body

    console.log('üìù Creating exercise:', { mode, exerciseName })

    // Step 1: Generate questions using GPT-4o-mini
    let questionsData: any[] = []

    if (mode === 'ai') {
      // Validate AI mode inputs
      const selectedTypes = Object.entries(questionTypes)
        .filter(([_, selected]) => selected)
        .map(([type]) => type)

      if (selectedTypes.length === 0) {
        return NextResponse.json(
          { error: 'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt lo·∫°i c√¢u h·ªèi' },
          { status: 400 }
        )
      }

      // Build AI prompt
      const prompt = `B·∫°n l√† m·ªôt chuy√™n gia t·∫°o ƒë·ªÅ thi ti·∫øng Anh. H√£y t·∫°o ${questionCount} c√¢u h·ªèi cho b√†i t·∫≠p "${exerciseName}".

Th√¥ng tin:
- ƒê·ªô kh√≥: ${difficulty}
- Lo·∫°i c√¢u h·ªèi: ${selectedTypes.join(', ')}
- Y√™u c·∫ßu th√™m: ${additionalRequirements || 'Kh√¥ng c√≥'}

Ph√¢n b·ªï c√¢u h·ªèi ƒë·ªÅu cho c√°c lo·∫°i ƒë√£ ch·ªçn.

ƒê·ªãnh d·∫°ng JSON cho t·ª´ng lo·∫°i:

MCQ (Multiple Choice):
{
  "type": "MCQ",
  "prompt": "C√¢u h·ªèi",
  "concept": "present_simple_verb",
  "level": "${difficulty}",
  "data": {
    "choices": ["l·ª±a ch·ªçn 1", "l·ª±a ch·ªçn 2", "l·ª±a ch·ªçn 3", "l·ª±a ch·ªçn 4"],
    "answerIndex": 0
  }
}

CLOZE (Fill in the blank):
{
  "type": "CLOZE",
  "prompt": "Ho√†n th√†nh c√¢u",
  "concept": "present_simple_verb",
  "level": "${difficulty}",
  "data": {
    "template": "I {{1}} to school every day.",
    "answers": ["go, home, bad, not"]
  }
}

ORDER (Word ordering):
{
  "type": "ORDER",
  "prompt": "S·∫Øp x·∫øp c√°c t·ª´ theo ƒë√∫ng th·ª© t·ª±",
  "concept": "present_simple_word_order",
  "level": "${difficulty}",
  "data": {
    "tokens": ["I", "go", "to", "school"]
  }
}

TRANSLATE (Translation):
{
  "type": "TRANSLATE",
  "prompt": "D·ªãch c√¢u sau sang ti·∫øng Anh",
  "concept": "present_simple_translation",
  "level": "${difficulty}",
  "data": {
    "vietnameseText": "T√¥i ƒëi h·ªçc m·ªói ng√†y.",
    "correctAnswer": "I go to school every day."
  }
}

Tr·∫£ v·ªÅ CH√çNH X√ÅC JSON array v·ªõi ${questionCount} c√¢u h·ªèi, kh√¥ng th√™m text gi·∫£i th√≠ch:
{ "questions": [...] }`

      const completion = await openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'B·∫°n l√† m·ªôt chuy√™n gia t·∫°o ƒë·ªÅ thi ti·∫øng Anh. Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng gi·∫£i th√≠ch th√™m.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.8,
        response_format: { type: 'json_object' }
      })

      const result = JSON.parse(completion.choices[0].message.content || '{}')
      questionsData = result.questions || []

      if (questionsData.length === 0) {
        throw new Error('AI kh√¥ng t·∫°o ƒë∆∞·ª£c c√¢u h·ªèi')
      }

      console.log(`‚úÖ AI generated ${questionsData.length} questions`)
    } else {
      // Manual mode - parse content
      try {
        // Try parsing as JSON first
        const parsed = JSON.parse(manualContent)
        questionsData = Array.isArray(parsed) ? parsed : parsed.questions || []
      } catch {
        return NextResponse.json(
          { error: 'N·ªôi dung kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON. Vui l√≤ng ki·ªÉm tra l·∫°i.' },
          { status: 400 }
        )
      }

      if (questionsData.length === 0) {
        return NextResponse.json(
          { error: 'Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o trong n·ªôi dung' },
          { status: 400 }
        )
      }

      console.log(`‚úÖ Parsed ${questionsData.length} questions from manual input`)
    }

    // Step 2: Validate questions structure
    for (const q of questionsData) {
      if (!q.type || !q.prompt || !q.data) {
        return NextResponse.json(
          { error: 'C·∫•u tr√∫c c√¢u h·ªèi kh√¥ng h·ª£p l·ªá. Thi·∫øu type, prompt ho·∫∑c data.' },
          { status: 400 }
        )
      }

      const validTypes = ['MCQ', 'CLOZE', 'ORDER', 'TRANSLATE']
      if (!validTypes.includes(q.type)) {
        return NextResponse.json(
          { error: `Lo·∫°i c√¢u h·ªèi kh√¥ng h·ª£p l·ªá: ${q.type}` },
          { status: 400 }
        )
      }
    }

    // Step 3: Create exercise with questions in a single transaction
    const exercise = await prisma.$transaction(async (tx) => {
      // Create exercise
      const newExercise = await tx.exercise.create({
        data: {
          title: exerciseName,
          description: additionalRequirements || `B√†i t·∫≠p ${mode === 'ai' ? 'AI t·∫°o' : 't·ª± nh·∫≠p'} - ${questionsData.length} c√¢u h·ªèi`,
          lessonId: lessonId || null,
          source: 'USER_CREATED',
          isPublic: false,
        }
      })

      // Create questions and link to exercise
      for (let i = 0; i < questionsData.length; i++) {
        const qData = questionsData[i]
        
        const question = await tx.question.create({
          data: {
            type: qData.type,
            prompt: qData.prompt,
            concept: qData.concept || 'general',
            level: qData.level || difficulty || 'A1',
            lessonId: lessonId || null,
            explain: qData.explain || null,
            data: qData.data,
            source: 'USER_CREATED',
            isPublic: false,
          }
        })

        await tx.exerciseQuestion.create({
          data: {
            exerciseId: newExercise.id,
            questionId: question.id,
            sortOrder: i + 1,
          }
        })
      }

      return newExercise
    })

    console.log('üéâ Exercise created successfully:', exercise.id)

    return NextResponse.json({
      success: true,
      exercise: {
        id: exercise.id,
        title: exercise.title,
        questionCount: questionsData.length
      }
    })

  } catch (error) {
    console.error('‚ùå Error creating exercise:', error)
    
    // Return specific error messages
    if (error instanceof Error) {
      return NextResponse.json(
        { error: error.message || 'Kh√¥ng th·ªÉ t·∫°o b√†i t·∫≠p. Vui l√≤ng th·ª≠ l·∫°i.' },
        { status: 500 }
      )
    }

    return NextResponse.json(
      { error: 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i.' },
      { status: 500 }
    )
  }
}
