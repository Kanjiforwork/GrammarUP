generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ========================================
// ENUMS
// ========================================

enum ContentSource {
  OFFICIAL
  USER_CREATED
}

enum Level {
  A1
  A2
  B1
  B2
}

enum QType {
  MCQ
  CLOZE
  ORDER
  TRANSLATE
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum UserRole {
  USER
  ADMIN
}

// ========================================
// MODELS
// ========================================

model Unit {
  id          String   @id @default(cuid())
  title       String
  description String?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  lessons     Lesson[]  // camelCase - ĐÚNG

  @@index([sortOrder])
}

model Lesson {
  id          String     @id @default(cuid())
  title       String
  description String?
  unitId      String
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  unit        Unit       @relation(fields: [unitId], references: [id], onDelete: Cascade)
  questions   Question[] // camelCase - ĐÚNG
  exercises   Exercise[] // camelCase - ĐÚNG

  @@index([unitId, sortOrder])
}

model Question {
  id               String             @id @default(cuid())
  type             QType
  prompt           String
  concept          String
  level            Level?
  lessonId         String?
  explain          String?
  data             Json
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  createdById      String?
  isPublic         Boolean            @default(false)
  source           ContentSource      @default(OFFICIAL)
  
  lesson           Lesson?            @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  creator          User?              @relation("CreatedQuestions", fields: [createdById], references: [id], onDelete: Cascade)
  attempts         Attempt[]          // camelCase - ĐÚNG
  exerciseQuestions ExerciseQuestion[] // camelCase - ĐÚNG

  @@index([concept])
  @@index([createdById])
  @@index([lessonId])
  @@index([level])
  @@index([source])
  @@index([type])
}

model Exercise {
  id               String             @id @default(cuid())
  title            String
  description      String?
  lessonId         String?
  sortOrder        Int                @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  createdById      String?
  isPublic         Boolean            @default(false)
  source           ContentSource      @default(OFFICIAL)
  
  lesson           Lesson?            @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  creator          User?              @relation("CreatedExercises", fields: [createdById], references: [id], onDelete: Cascade)
  exerciseQuestions ExerciseQuestion[] // camelCase - ĐÚNG

  @@index([createdById])
  @@index([lessonId, sortOrder])
  @@index([source])
}

model ExerciseQuestion {
  id         String   @id @default(cuid())
  exerciseId String
  questionId String
  sortOrder  Int      @default(0)
  createdAt  DateTime @default(now())
  
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([exerciseId, questionId])
  @@index([exerciseId, sortOrder])
  @@index([questionId])
}

model User {
  id                 String     @id @default(cuid())
  email              String     @unique
  username           String?
  avatar             Int        @default(1)
  role               UserRole   @default(USER)
  streak             Int        @default(0)
  highestStreak      Int        @default(0)
  lastActiveDate     DateTime?
  currentUnit        String?
  completedLessons   String[]   @default([])
  completedExercises String[]   @default([])
  theme              Theme      @default(SYSTEM)
  soundEnabled       Boolean    @default(true)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  
  attempts          Attempt[]  // camelCase - ĐÚNG
  createdExercises  Exercise[] @relation("CreatedExercises")
  createdQuestions  Question[] @relation("CreatedQuestions")

  @@index([currentUnit])
  @@index([email])
  @@index([lastActiveDate])
}

model Attempt {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  answer     Json
  isCorrect  Boolean
  timeSpent  Int?
  createdAt  DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@index([userId, createdAt])
  @@index([userId])
  @@index([userId, isCorrect])
}
